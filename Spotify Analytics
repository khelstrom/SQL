-- For this project, I downloaded Spotify data from Kaggle.
-- Then I created a table to insert Spotify data into.
-- Finally, I performed analytics on the data using SQL. 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

--Then I inserted the Spotify Data .csv into the table.

--Next, I explored the data using the following SQL. 

SELECT *
FROM BIT_DB.Spotifydata;

--What is the average danceability per artist?
SELECT artist_name, AVG(danceability) avg_danceabilty
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY danceability desc;

--Who are the top 10 artsists based on popularity?
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

--What artist released the longest song?
SELECT artist_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc
LIMIT 1;

--How many songs did each artist have in the top 50?
SELECT artist_name, COUNT(track_name) total_songs
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY total_songs desc;

--Create a playlist from the top 50 of songs that have more acoustics and less speechiness.
SELECT track_name, artist_name, acousticness, speechiness
FROM BIT_DB.Spotifydata
WHERE acousticness > 0.4
AND speechiness < 0.2;

--Create a playlist that with songs of a high tempo and danceability for a dance class.
SELECT track_name, artist_name, danceability, tempo
FROM BIT_DB.Spotifydata
WHERE tempo > 100
AND danceability > 0.7
ORDER BY danceability desc;

--Tag each song dependent on their energy levels, using case statements
SELECT track_name, artist_name,
    CASE
        WHEN energy > 0.75 THEN "High Energy Song!"
        WHEN energy > 0.6 THEN "Medium Energy Song."
        ELSE "Low Energy Song..."
    END AS energy_level
FROM BIT_DB.Spotifydata
ORDER BY energy desc;

--Calculate the average popularity for the artists in the Spotify data table. 
--Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.
--I will be using a CTE (Common Table Expression) to find this

WITH popularity_avg_CTE AS (
    SELECT spot.artist_name, AVG(spot.popularity) avg_popularity
    FROM Spotifydata spot
    GROUP BY spot.artist_name
)
SELECT artist_name, avg_popularity, 'Top Star' AS tag
FROM popularity_avg_CTE
WHERE avg_popularity >= 90;
